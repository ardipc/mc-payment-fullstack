import Head from 'next/head'
import { Fragment, useState } from 'react'
import Menu from '../components/menu';
import styles from '../styles/Home.module.css'

import { withIronSessionSsr } from "iron-session/next";
import Footer from '../components/footer';
import { FaDotCircle, FaEdit, FaPlus, FaTrash } from 'react-icons/fa';
import { absoluteUrl, toRupiah } from '../middleware/utils';

import TransactionItem from '../components/transaction';
import moment from 'moment';

export const getServerSideProps = withIronSessionSsr(
  async function getServerSideProps({ req }) {
    const { user } = req.session;

    if (!user) {
      return {
        redirect: {
          destination: '/login',
          permanent: false
        },
      };
    }

    const { origin } = absoluteUrl(req);
    let fTrans = await fetch(`${origin}/api/transaction/account?v=${user.id}`);
    let rTrans = await fTrans.json();

    return {
      props: {
        user,
        transaction: rTrans.result.filter(item => item.transactionType === 'Earning')
      },
    };
  },
  {
    cookieName: "mc-payment-fullstack",
    password: "f89a89e7a62b05c1d3a5758cdcd6c7645a37549e",
    cookieOptions: {
      secure: process.env.NODE_ENV === "production",
    },
  },
);

export default function Home(props) {

  const { user, transaction } = props;
  const [transactions, setTransactions] = useState(transaction);
  
  const clickTrash = async (id) => {
    let options = {
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      method: 'DELETE'
    };
    let fDel = await fetch(`/api/transaction/${id}`, options);
    let rDel = await fDel.json();
    const { success } = rDel;
    if (success) {
      fetchTransaction(user.id);
    }
  }

  const fetchTransaction = async (userId) => {
    let fTrans = await fetch(`/api/transaction/account?v=${userId}`);
    let rTrans = await fTrans.json();
    setTransactions(rTrans.result.filter(item => item.transactionType === 'Earning'));
  }

  let totalEarning = 0;
  transactions.map(item => totalEarning += item.amount);
  
  return (
    <Fragment>
      <div className="mobile">
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className='top-bar' style={{ justifyContent: 'center' }}>
          <div className='top-bar-item'>
            <h4>Earning</h4>
          </div>
        </div>
        <main>
          <div className='grid'>
            <div className='col-8'>
              <h3>Total Earning</h3>
              <h1 className="text-green">+{toRupiah(totalEarning, 'Rp')}</h1>
            </div>
            {
              transactions.length ?
                transactions.map((item, index) => (
                  <TransactionItem key={index} item={item} clickTrash={(id) => clickTrash(id)} />
                ))
                :
                <p>Oops, no transaction.</p>
            }
          </div>

          <div className='divider' />
          
          <Footer />

        </main>
      </div>
      <Menu />
    </Fragment>
  )
}
